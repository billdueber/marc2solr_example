require 'rubygems'
require 'jackson-core-asl-1.4.3.jar'
require 'jackson-mapper-asl-1.4.3.jar'
require 'apache-solr-umichnormalizers.jar'
require 'HLB3.jar'

include_class Java::edu.umich.lib.hlb::HLB

module MARC2Solr
  module Custom
    module UMich
      
      # Get the language(s)
      def self.getLanguage(doc, r)
        rawdata  = []

        # 008
        if r['008'] and r['008'].value[35..37]
          rawdata <<  r['008'].value[35..37].downcase
        end

        # 041, subfields adej
        codes = ['a', 'd', 'e', 'j']
        r.find_by_tag('041').each do |f|
          f.sub_values(codes).each do |v|
            unless v.size.modulo(3) == 0
    #          puts "getLanguage: #{r['001'].value} Invalid data length #{v.size} in 041. #{f.to_s}"
              next
            end
            v.split(//).each_slice(3) do |c|
              rawdata << langcode = c.join('').downcase
            end
          end
        end
        return rawdata
      end
      
      
      # For each title (245), extract the given codes, and then
      # return both that whole string and the the string with the
      # number of charactes indicated by ind2 (the "non-filing chars) removed.
      def self.getTitle(doc, r, codes)
        data = []
        fields = r.find_by_tag('245')
        fields.each do |f|
          subvals = f.sub_values(codes)
          subvals.compact!
          if subvals.size > 0
            val = subvals.join(' ')
            data << val
            ind2 = f.indicator2.to_i
            if ind2 > 0 and ind2 < val.length
              data << val[ind2..-1]
            end
          end
        end
        return data
      end
      
      def self.getSerialTitle doc, r, codes
        if doc['format'] and doc['format'].include? 'Serial'
          return self.getTitle(doc, r, codes)
        else
          return []
        end
      end
      
      def self.getTitleSortable doc, r, codes
        data = []
        r.find_by_tag('245').each do |f|
          subvals = f.sub_values(codes)
          subvals.compact!
          if subvals.size > 0
            val = subvals.join(' ')
            ind2 = f.indicator2.to_i
            if ind2 > 0 and ind2 < val.length
             data << val[ind2..-1]
            else
              data << val
            end
          end
        end
        return data.map{|v| v.gsub(/\p{Punct}/, ' ').gsub(/\s+/, ' ').strip.downcase }
      end
      
      
      
    end
  end
end